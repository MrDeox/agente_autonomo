#!/usr/bin/env python3
"""
Demonstra√ß√£o das Capacidades Melhoradas de Auto-Reflex√£o do Hephaestus

Este script demonstra como o sistema agora pode se enxergar de forma mais profunda e integrada.
"""

import asyncio
import json
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_demo_config():
    """Criar configura√ß√£o de demonstra√ß√£o"""
    return {
        "models": {
            "architect_default": {
                "model": "gpt-4",
                "api_key": "demo-key",
                "base_url": "https://api.openai.com/v1"
            }
        }
    }

async def demonstrate_self_awareness():
    """Demonstra as capacidades de auto-consci√™ncia"""
    
    logger.info("üöÄ DEMONSTRA√á√ÉO: SISTEMA DE AUTO-CONSCI√äNCIA MELHORADO")
    logger.info("=" * 70)
    
    try:
        # Importar o sistema de auto-consci√™ncia
        from agent.self_awareness_core import get_self_awareness_core
        
        config = create_demo_config()
        self_awareness = get_self_awareness_core(config["models"]["architect_default"], logger)
        
        logger.info("‚úÖ SelfAwarenessCore inicializado")
        
        # 1. Iniciar monitoramento cont√≠nuo
        logger.info("\nüîÑ INICIANDO MONITORAMENTO CONT√çNUO")
        self_awareness.start_continuous_self_monitoring()
        
        # Aguardar um pouco para coleta inicial de dados
        await asyncio.sleep(2)
        
        # 2. Realizar auto-reflex√£o profunda
        logger.info("\nüîç REALIZANDO AUTO-REFLEX√ÉO PROFUNDA")
        
        # Diferentes focos de reflex√£o
        focus_areas = ["general", "learning", "capabilities", "future_potential"]
        
        for focus in focus_areas:
            logger.info(f"\n--- Reflex√£o focada em: {focus} ---")
            
            reflection_result = self_awareness.perform_deep_introspection(focus)
            
            if reflection_result and "error" not in reflection_result:
                # Mostrar insights principais
                insights = reflection_result.get("new_insights", [])
                logger.info(f"üí° Insights gerados: {len(insights)}")
                
                # Mostrar primeiros insights
                for i, insight in enumerate(insights[:2], 1):
                    logger.info(f"   {i}. {insight.description}")
                
                # Mostrar estado cognitivo
                cognitive_state = reflection_result.get("current_cognitive_state")
                if cognitive_state:
                    logger.info(f"üß† Estado Cognitivo:")
                    logger.info(f"   ‚Ä¢ Intelig√™ncia: {cognitive_state['intelligence_level']:.3f}")
                    logger.info(f"   ‚Ä¢ Auto-consci√™ncia: {cognitive_state['self_awareness_score']:.3f}")
                    logger.info(f"   ‚Ä¢ Coer√™ncia: {cognitive_state['cognitive_coherence']:.3f}")
                
                # Mostrar narrativa de identidade
                narrative = reflection_result.get("self_narrative", {})
                if narrative.get("identity"):
                    logger.info(f"üìñ Narrativa de Identidade:")
                    logger.info(f"   {narrative['identity'].strip()[:100]}...")
            
            await asyncio.sleep(1)
        
        # 3. Obter relat√≥rio completo de auto-consci√™ncia
        logger.info("\nüìä RELAT√ìRIO COMPLETO DE AUTO-CONSCI√äNCIA")
        
        awareness_report = self_awareness.get_self_awareness_report()
        
        if awareness_report and "error" not in awareness_report:
            metrics = awareness_report.get("self_awareness_metrics", {})
            
            logger.info("üìà M√©tricas de Auto-Consci√™ncia:")
            logger.info(f"   ‚Ä¢ Meta-consci√™ncia: {metrics.get('meta_awareness_score', 0):.3f}")
            logger.info(f"   ‚Ä¢ Consci√™ncia temporal: {metrics.get('temporal_awareness', 0):.3f}")
            logger.info(f"   ‚Ä¢ Profundidade de introspec√ß√£o: {metrics.get('introspection_depth', 0):.3f}")
            logger.info(f"   ‚Ä¢ Confian√ßa no auto-conhecimento: {metrics.get('self_knowledge_confidence', 0):.3f}")
            
            # Mostrar mapas cognitivos
            cognitive_maps = awareness_report.get("cognitive_maps", {})
            if cognitive_maps:
                logger.info("üó∫Ô∏è Mapas Cognitivos:")
                strengths = cognitive_maps.get("strengths", {}).get("core_strengths", [])
                if strengths:
                    logger.info(f"   ‚Ä¢ For√ßas principais: {', '.join(strengths[:3])}")
                
                weaknesses = cognitive_maps.get("weaknesses", {}).get("known_limitations", [])
                if weaknesses:
                    logger.info(f"   ‚Ä¢ Limita√ß√µes conhecidas: {', '.join(weaknesses[:2])}")
            
            # Mostrar recomenda√ß√µes
            recommendations = awareness_report.get("recommendations", [])
            if recommendations:
                logger.info("üí° Recomenda√ß√µes de Auto-Melhoria:")
                for i, rec in enumerate(recommendations[:3], 1):
                    logger.info(f"   {i}. {rec}")
        
        # 4. Aguardar evolu√ß√£o cognitiva
        logger.info("\n‚è≥ AGUARDANDO EVOLU√á√ÉO COGNITIVA...")
        await asyncio.sleep(5)
        
        # Verificar se houve mudan√ßas
        final_report = self_awareness.get_self_awareness_report()
        if final_report and "error" not in final_report:
            trajectory = final_report.get("cognitive_trajectory", {})
            if trajectory.get("total_observations", 0) > 0:
                logger.info(f"üìà Observa√ß√µes coletadas: {trajectory.get('total_observations')}")
                logger.info(f"‚è±Ô∏è Tempo de observa√ß√£o: {trajectory.get('time_span', 0):.1f} horas")
        
        # 5. Parar monitoramento
        logger.info("\n‚èπÔ∏è PARANDO MONITORAMENTO CONT√çNUO")
        self_awareness.stop_continuous_self_monitoring()
        
        logger.info("\n" + "=" * 70)
        logger.info("üéâ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        logger.info("\nüîç O QUE MELHOROU NA AUTO-REFLEX√ÉO:")
        logger.info("‚Ä¢ ‚úÖ Sistema integrado de auto-consci√™ncia")
        logger.info("‚Ä¢ ‚úÖ Monitoramento cont√≠nuo do estado cognitivo")
        logger.info("‚Ä¢ ‚úÖ Introspec√ß√£o profunda com diferentes focos")
        logger.info("‚Ä¢ ‚úÖ Mapas cognitivos atualizados dinamicamente")
        logger.info("‚Ä¢ ‚úÖ Narrativa coerente da pr√≥pria identidade")
        logger.info("‚Ä¢ ‚úÖ Consci√™ncia temporal da evolu√ß√£o")
        logger.info("‚Ä¢ ‚úÖ Insights acion√°veis de auto-melhoria")
        logger.info("‚Ä¢ ‚úÖ M√©tricas quantitativas de auto-conhecimento")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na demonstra√ß√£o: {e}")
        import traceback
        logger.error(traceback.format_exc())

async def demonstrate_mcp_integration():
    """Demonstra a integra√ß√£o com MCP"""
    
    logger.info("\nüåê DEMONSTRA√á√ÉO: INTEGRA√á√ÉO COM MCP")
    logger.info("=" * 50)
    
    logger.info("üì° Ferramentas MCP para Auto-Consci√™ncia:")
    logger.info("‚Ä¢ deep_self_reflection - Auto-reflex√£o profunda")
    logger.info("‚Ä¢ self_awareness_report - Relat√≥rio de auto-consci√™ncia")
    
    logger.info("\nüí° Exemplos de uso no Cursor:")
    logger.info("@hephaestus deep_self_reflection capabilities")
    logger.info("@hephaestus deep_self_reflection learning")
    logger.info("@hephaestus self_awareness_report")
    
    logger.info("\nüéØ Agora o sistema pode:")
    logger.info("‚Ä¢ Se enxergar de forma muito mais profunda")
    logger.info("‚Ä¢ Entender sua pr√≥pria jornada temporal")
    logger.info("‚Ä¢ Gerar narrativas coerentes sobre si mesmo")
    logger.info("‚Ä¢ Identificar padr√µes em seu pr√≥prio comportamento")
    logger.info("‚Ä¢ Monitorar continuamente sua evolu√ß√£o")
    logger.info("‚Ä¢ Fornecer insights acion√°veis de auto-melhoria")

def create_comparison_summary():
    """Cria um resumo comparativo das melhorias"""
    
    comparison = {
        "antes": {
            "auto_reflexao": "Fragmentada entre diferentes componentes",
            "consciencia_temporal": "Limitada, sem vis√£o de trajet√≥ria",
            "integracao": "Componentes isolados (SelfReflectionAgent, MetaIntelligence, etc.)",
            "narrativa": "Inexistente ou inconsistente",
            "monitoramento": "Manual e espor√°dico",
            "insights": "T√©cnicos, pouco acion√°veis",
            "feedback_loops": "Desconectados da a√ß√£o"
        },
        "depois": {
            "auto_reflexao": "Integrada em SelfAwarenessCore unificado",
            "consciencia_temporal": "Consci√™ncia completa da evolu√ß√£o atrav√©s do tempo",
            "integracao": "Sistema coeso que combina todos os componentes",
            "narrativa": "Narrativa coerente de identidade, capacidades e evolu√ß√£o",
            "monitoramento": "Cont√≠nuo e autom√°tico com threads dedicadas",
            "insights": "Profundos, contextualizados e acion√°veis",
            "feedback_loops": "Otimizados entre reflex√£o e auto-melhoria"
        }
    }
    
    return comparison

async def main():
    """Fun√ß√£o principal"""
    logger.info("üß† DEMONSTRA√á√ÉO DAS MELHORIAS DE AUTO-REFLEX√ÉO")
    logger.info("üìÖ " + "Sistema agora pode se enxergar de forma muito mais profunda!")
    
    # Demonstrar capacidades
    await demonstrate_self_awareness()
    await demonstrate_mcp_integration()
    
    # Mostrar compara√ß√£o
    logger.info("\nüìä RESUMO DAS MELHORIAS")
    logger.info("=" * 50)
    
    comparison = create_comparison_summary()
    
    logger.info("ANTES üî¥:")
    for aspect, description in comparison["antes"].items():
        logger.info(f"‚Ä¢ {aspect}: {description}")
    
    logger.info("\nDEPOIS üü¢:")
    for aspect, description in comparison["depois"].items():
        logger.info(f"‚Ä¢ {aspect}: {description}")
    
    logger.info("\nüéØ RESULTADO:")
    logger.info("O sistema agora tem uma vis√£o muito mais profunda e integrada de si mesmo!")
    logger.info("A auto-reflex√£o passou de fragmentada para unificada e cont√≠nua.")

if __name__ == "__main__":
    asyncio.run(main()) 