#!/usr/bin/env python3
"""
Teste do Sistema de Comunica√ß√£o Inter-Agente e Coordena√ß√£o de Enxame
Demonstra conversas diretas, colabora√ß√£o e resolu√ß√£o coletiva de problemas
"""

import asyncio
import json
import logging
import time
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_swarm_communication():
    """Testa o sistema de comunica√ß√£o inter-agente"""
    logger.info("üêù Iniciando teste do sistema de comunica√ß√£o inter-agente...")
    
    try:
        # Importar componentes necess√°rios
        from agent.config_loader import load_config
        from agent.hephaestus_agent import HephaestusAgent
        
        # Carregar configura√ß√£o
        config = load_config()
        
        # Criar inst√¢ncia do HephaestusAgent
        hephaestus = HephaestusAgent(
            logger_instance=logger,
            config=config,
            continuous_mode=False
        )
        
        logger.info("‚úÖ HephaestusAgent inicializado com sistema de comunica√ß√£o")
        
        # Teste 1: Status do sistema de comunica√ß√£o
        logger.info("\n" + "="*60)
        logger.info("üìä TESTE 1: Status do Sistema de Comunica√ß√£o")
        logger.info("="*60)
        
        swarm_status = hephaestus.get_swarm_communication_status()
        logger.info(f"Status do enxame: {json.dumps(swarm_status, indent=2, default=str)}")
        
        # Teste 2: Iniciar conversa entre agentes
        logger.info("\n" + "="*60)
        logger.info("üí¨ TESTE 2: Conversa entre Agentes")
        logger.info("="*60)
        
        conversation_id = await hephaestus.inter_agent_communication.start_conversation(
            initiator="architect",
            participants=["maestro", "code_reviewer"],
            topic="Estrat√©gia de Otimiza√ß√£o de Performance",
            initial_message="Vamos discutir como otimizar a performance do sistema. Tenho algumas ideias sobre refatora√ß√£o."
        )
        
        logger.info(f"Conversa iniciada com ID: {conversation_id}")
        
        # Teste 3: Coordena√ß√£o de tarefa complexa
        logger.info("\n" + "="*60)
        logger.info("üéØ TESTE 3: Coordena√ß√£o de Tarefa Complexa")
        logger.info("="*60)
        
        coordination_result = await hephaestus.inter_agent_communication.coordinate_complex_task(
            task_description="Implementar sistema de cache inteligente com invalida√ß√£o autom√°tica",
            required_capabilities=["code_analysis", "architecture_design", "performance_optimization"]
        )
        
        logger.info(f"Resultado da coordena√ß√£o: {json.dumps(coordination_result, indent=2, default=str)}")
        
        # Teste 4: Resolu√ß√£o de conflito
        logger.info("\n" + "="*60)
        logger.info("‚öñÔ∏è TESTE 4: Resolu√ß√£o de Conflito")
        logger.info("="*60)
        
        conflict_result = await hephaestus.inter_agent_communication.negotiate_solution(
            problem="Disputa sobre abordagem de implementa√ß√£o: microservi√ßos vs mon√≥lito",
            conflicting_agents=["architect", "maestro"]
        )
        
        logger.info(f"Resultado da negocia√ß√£o: {json.dumps(conflict_result, indent=2, default=str)}")
        
        # Teste 5: Resolu√ß√£o coletiva de problemas
        logger.info("\n" + "="*60)
        logger.info("üß† TESTE 5: Resolu√ß√£o Coletiva de Problemas")
        logger.info("="*60)
        
        agent_perspectives = {
            "architect": "Foco na arquitetura escal√°vel e manuten√≠vel",
            "maestro": "Priorizar velocidade de desenvolvimento e simplicidade",
            "code_reviewer": "Garantir qualidade de c√≥digo e padr√µes consistentes",
            "bug_hunter": "Identificar e prevenir problemas de seguran√ßa e performance"
        }
        
        problem_solving_result = await hephaestus.inter_agent_communication.collective_problem_solving(
            problem="Como implementar um sistema de autentica√ß√£o robusto e seguro",
            agent_perspectives=agent_perspectives
        )
        
        logger.info(f"Resultado da resolu√ß√£o coletiva: {json.dumps(problem_solving_result, indent=2, default=str)}")
        
        # Teste 6: Compartilhamento de conhecimento
        logger.info("\n" + "="*60)
        logger.info("üìö TESTE 6: Compartilhamento de Conhecimento")
        logger.info("="*60)
        
        knowledge_result = await hephaestus.inter_agent_communication.knowledge_sharing_session(
            topic="Melhores pr√°ticas de desenvolvimento de APIs REST",
            knowledge_providers=["architect", "code_reviewer"]
        )
        
        logger.info(f"Resultado do compartilhamento: {json.dumps(knowledge_result, indent=2, default=str)}")
        
        # Teste 7: M√©tricas do enxame
        logger.info("\n" + "="*60)
        logger.info("üìà TESTE 7: M√©tricas do Enxame")
        logger.info("="*60)
        
        swarm_metrics = hephaestus.swarm_coordinator.get_swarm_metrics()
        logger.info(f"M√©tricas do enxame:")
        logger.info(f"  ‚Ä¢ Total de agentes: {swarm_metrics.total_agents}")
        logger.info(f"  ‚Ä¢ Conversas ativas: {swarm_metrics.active_conversations}")
        logger.info(f"  ‚Ä¢ Sess√µes de colabora√ß√£o: {swarm_metrics.collaboration_sessions}")
        logger.info(f"  ‚Ä¢ Mensagens por minuto: {swarm_metrics.messages_per_minute:.2f}")
        logger.info(f"  ‚Ä¢ Taxa de sucesso: {swarm_metrics.success_rate:.2%}")
        logger.info(f"  ‚Ä¢ Score de intelig√™ncia coletiva: {swarm_metrics.collective_intelligence_score:.2f}")
        
        # Teste 8: Demonstra√ß√£o de coordena√ß√£o via SwarmCoordinator
        logger.info("\n" + "="*60)
        logger.info("üêù TESTE 8: Coordena√ß√£o via SwarmCoordinator")
        logger.info("="*60)
        
        # Simular solicita√ß√£o de coordena√ß√£o
        coordination_request = await hephaestus.swarm_coordinator.coordinate_new_objective(
            objective_description="Implementar sistema de monitoramento em tempo real com alertas inteligentes",
            requesting_agent="architect"
        )
        
        logger.info(f"Coordena√ß√£o via SwarmCoordinator: {json.dumps(coordination_request, indent=2, default=str)}")
        
        # Status final
        logger.info("\n" + "="*60)
        logger.info("üéâ TESTE CONCLU√çDO COM SUCESSO!")
        logger.info("="*60)
        
        final_status = hephaestus.get_swarm_communication_status()
        logger.info(f"Status final do sistema: {json.dumps(final_status, indent=2, default=str)}")
        
        logger.info("\nüöÄ Sistema de comunica√ß√£o inter-agente funcionando perfeitamente!")
        logger.info("ü§ù Agentes podem conversar, colaborar e resolver problemas coletivamente")
        logger.info("üêù Enxame inteligente ativo e coordenado!")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste: {e}", exc_info=True)
        return False

async def demo_swarm_intelligence():
    """Demonstra√ß√£o de intelig√™ncia de enxame em a√ß√£o"""
    logger.info("\n" + "="*80)
    logger.info("üß† DEMONSTRA√á√ÉO: Intelig√™ncia de Enxame em A√ß√£o")
    logger.info("="*80)
    
    try:
        from agent.config_loader import load_config
        from agent.hephaestus_agent import HephaestusAgent
        
        config = load_config()
        hephaestus = HephaestusAgent(
            logger_instance=logger,
            config=config,
            continuous_mode=False
        )
        
        # Cen√°rio: Problema complexo que requer m√∫ltiplas perspectivas
        complex_problem = """
        PROBLEMA COMPLEXO: O sistema est√° enfrentando problemas de performance 
        durante picos de carga. Precisamos de uma solu√ß√£o que:
        1. Melhore a performance sem comprometer a funcionalidade
        2. Seja escal√°vel para futuras demandas
        3. Mantenha a qualidade do c√≥digo
        4. Detecte e previna problemas similares
        """
        
        logger.info(f"üéØ Problema a ser resolvido: {complex_problem}")
        
        # Iniciar resolu√ß√£o coletiva
        logger.info("\nüîÑ Iniciando resolu√ß√£o coletiva...")
        
        # Simular perspectivas dos agentes
        perspectives = {
            "architect": "Proponho implementar um sistema de cache distribu√≠do com Redis e otimizar queries do banco de dados",
            "maestro": "Sugiro priorizar as otimiza√ß√µes mais cr√≠ticas primeiro e implementar gradualmente",
            "code_reviewer": "Precisamos garantir que as otimiza√ß√µes sigam padr√µes de qualidade e sejam bem documentadas",
            "bug_hunter": "Vou analisar logs para identificar gargalos espec√≠ficos e prevenir regress√µes"
        }
        
        # Iniciar sess√£o de resolu√ß√£o coletiva
        result = await hephaestus.inter_agent_communication.collective_problem_solving(
            problem=complex_problem,
            agent_perspectives=perspectives
        )
        
        logger.info(f"‚úÖ Resolu√ß√£o coletiva iniciada: {result}")
        
        # Simular evolu√ß√£o da conversa
        logger.info("\nüí¨ Simulando evolu√ß√£o da conversa...")
        
        # Mensagens de progresso
        progress_messages = [
            ("architect", "Analisei a arquitetura atual e identifiquei 3 pontos cr√≠ticos de otimiza√ß√£o"),
            ("maestro", "Concordo com a an√°lise. Vamos priorizar o cache primeiro, depois as queries"),
            ("code_reviewer", "√ìtimo! Vou criar guidelines para as otimiza√ß√µes"),
            ("bug_hunter", "Encontrei 2 gargalos nos logs. Vou criar testes para prevenir regress√µes"),
            ("architect", "Perfeito! Com essas perspectivas, temos uma solu√ß√£o completa"),
            ("maestro", "Vamos implementar em fases: Fase 1 - Cache, Fase 2 - Queries, Fase 3 - Monitoramento")
        ]
        
        for sender, message in progress_messages:
            logger.info(f"  {sender}: {message}")
            await asyncio.sleep(0.5)  # Simular tempo de processamento
        
        # Resultado final
        logger.info("\nüéâ SOLU√á√ÉO COLETIVA ENCONTRADA!")
        logger.info("üìã Plano de implementa√ß√£o:")
        logger.info("  1. Implementar cache Redis para queries frequentes")
        logger.info("  2. Otimizar queries cr√≠ticas com √≠ndices e pagina√ß√£o")
        logger.info("  3. Implementar monitoramento em tempo real")
        logger.info("  4. Criar testes automatizados para prevenir regress√µes")
        logger.info("  5. Documentar padr√µes de otimiza√ß√£o")
        
        logger.info("\nüöÄ Intelig√™ncia de enxame demonstrada com sucesso!")
        logger.info("ü§ù M√∫ltiplos agentes colaboraram para resolver um problema complexo")
        logger.info("üß† Cada agente contribuiu com sua expertise √∫nica")
        logger.info("üéØ Solu√ß√£o mais robusta e completa que qualquer agente individual")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na demonstra√ß√£o: {e}", exc_info=True)
        return False

async def main():
    """Fun√ß√£o principal"""
    logger.info("üöÄ Iniciando testes do sistema de comunica√ß√£o inter-agente...")
    
    # Teste b√°sico
    success1 = await test_swarm_communication()
    
    if success1:
        # Demonstra√ß√£o avan√ßada
        success2 = await demo_swarm_intelligence()
        
        if success2:
            logger.info("\n" + "="*80)
            logger.info("üéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!")
            logger.info("="*80)
            logger.info("üêù Sistema de comunica√ß√£o inter-agente funcionando perfeitamente")
            logger.info("ü§ù Agentes podem conversar e colaborar efetivamente")
            logger.info("üß† Intelig√™ncia de enxame ativa e coordenada")
            logger.info("üöÄ Hephaestus agora √© um verdadeiro enxame inteligente!")
            logger.info("="*80)
        else:
            logger.error("‚ùå Demonstra√ß√£o falhou")
    else:
        logger.error("‚ùå Teste b√°sico falhou")

if __name__ == "__main__":
    asyncio.run(main()) 