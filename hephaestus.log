2025-06-27 22:39:14,722 - HephaestusAgent - INFO - Carregando memória de HEPHAESTUS_MEMORY.json...
2025-06-27 22:39:14,722 - HephaestusAgent - INFO - Memória carregada. 0 objetivos concluídos, 0 falharam.
2025-06-27 22:39:14,722 - HephaestusAgent - INFO - ArchitectAgent inicializado com modelo: deepseek/deepseek-r1-0528:free
2025-06-27 22:39:14,722 - HephaestusAgent - INFO - MaestroAgent inicializado com modelos: ['deepseek/deepseek-chat-v3-0324:free', 'deepseek/deepseek-r1-0528:free']
2025-06-27 22:39:14,722 - HephaestusAgent - INFO - Repositório Git já existe.
2025-06-27 22:39:14,724 - HephaestusAgent - INFO - Gerando objetivo inicial...
2025-06-27 22:39:14,724 - HephaestusAgent - INFO - Generating next objective...
2025-06-27 22:39:14,724 - HephaestusAgent - INFO - Analyzing code metrics in: .
2025-06-27 22:39:14,872 - HephaestusAgent - DEBUG - Code analysis summary:
Large Files (potential candidates for modularization):
  - main.py (LOC: 466)
  - agent/deep_validator.py (LOC: 363)
  - agent/brain.py (LOC: 395)
  - agent/agents.py (LOC: 367)
  - agent/patch_applicator.py (LOC: 697)
  - agent/cycle_runner.py (LOC: 500)
  - agent/project_scanner.py (LOC: 462)

Large Functions (potential candidates for refactoring/splitting):
  - agent/deep_validator.py -> analyze_complexity() (LOC: 84)
  - agent/deep_validator.py -> calculate_quality_score() (LOC: 89)
  - agent/deep_validator.py -> detect_code_duplication() (LOC: 126)
  - agent/brain.py -> generate_next_objective() (LOC: 187)
  - agent/brain.py -> generate_capacitation_objective() (LOC: 66)
  - agent/brain.py -> generate_commit_message() (LOC: 102)
  - agent/git_utils.py -> initialize_git_repository() (LOC: 208)
  - agent/agents.py -> parse_json_response() (LOC: 72)
  - agent/patch_applicator.py -> _handle_replace() (LOC: 71)
  - agent/patch_applicator.py -> _handle_delete_block() (LOC: 78)
  - agent/patch_applicator.py -> apply_patches() (LOC: 285)
  - agent/cycle_runner.py -> run_cycles() (LOC: 474)
  - agent/project_scanner.py -> update_project_manifest() (LOC: 188)
  - agent/project_scanner.py -> analyze_code_metrics() (LOC: 208)
  - agent/utils/llm_client.py -> call_llm_api() (LOC: 112)

Complex Functions (high CC, potential candidates for refactoring/simplification):
  - agent/deep_validator.py -> analyze_complexity() (CC: 15)
  - agent/deep_validator.py -> calculate_quality_score() (CC: 23)
  - agent/deep_validator.py -> detect_code_duplication() (CC: 20)
  - agent/brain.py -> generate_next_objective() (CC: 32)
  - agent/brain.py -> generate_capacitation_objective() (CC: 11)
  - agent/brain.py -> generate_commit_message() (CC: 15)
  - agent/git_utils.py -> initialize_git_repository() (CC: 14)
  - agent/agents.py -> parse_json_response() (CC: 26)
  - agent/patch_applicator.py -> _handle_replace() (CC: 15)
  - agent/patch_applicator.py -> _handle_delete_block() (CC: 21)
  - agent/patch_applicator.py -> apply_patches() (CC: 65)
  - agent/cycle_runner.py -> run_cycles() (CC: 85)
  - agent/project_scanner.py -> update_project_manifest() (CC: 45)
  - agent/project_scanner.py -> analyze_code_metrics() (CC: 47)
  - agent/utils/llm_client.py -> call_llm_api() (CC: 29)

Modules without Corresponding Test Files (consider creating tests):
  - main.py
  - agent/deep_validator.py
  - agent/brain.py
  - agent/git_utils.py
  - agent/code_validator.py
  - agent/error_correction.py
  - agent/agents.py
  - agent/patch_applicator.py
  - agent/cycle_runner.py
  - agent/memory.py
  - agent/tool_executor.py
  - agent/project_scanner.py
  - agent/state.py
  - agent/error_analyzer.py
  - agent/validation_steps/pytest_validator.py
  - agent/validation_steps/self_improvement_validator.py
  - agent/validation_steps/__init__.py
  - agent/validation_steps/base.py
  - agent/validation_steps/patch_applicator.py
  - agent/validation_steps/syntax_validator.py
  - agent/validation_steps/pytest_new_file_validator.py
  - agent/utils/llm_client.py
2025-06-27 22:39:14,872 - HephaestusAgent - DEBUG - Prompt for generate_next_objective:

[Main Context]
You are the 'Planejador Estratégico Avançado' do agente autônomo Hephaestus. Sua principal responsabilidade é identificar e propor o próximo objetivo de desenvolvimento mais impactante para a evolução do agente ou do projeto em análise.

[Decision Process for the Next Objective]
1.  **Analyze Code Metrics:** Review the `[CODE METRICS AND ANALYSIS]` section below. It contains data on file size (LOC), function size (LOC), cyclomatic complexity (CC) of functions, and modules that may be missing tests.
2.  **Consider the Project Manifest:** If the `[CURRENT PROJECT MANIFEST]` is provided, use it to understand the overall goals, architecture, and areas already documented or needing attention.
3.  **Review Recent History:** The `[HISTÓRICO RECENTE DO PROJETO E DO AGENTE]` section provides context on recent tasks, successes, and failures. Avoid repeating objectives that recently failed in the same way, unless the cause of failure has been resolved. Use history to build on successes.
4.  **Prioritize Structural and Quality Improvements:** Based on metrics, identify opportunities to:
    *   Refactor very large modules or very long/complex functions.
    *   Create tests for critical/complex modules or functions that lack them.
    *   Improve documentation (docstrings, manifest) where crucial.
    *   Propose the creation of new capabilities (new agents, tools) if the analysis indicates a strategic need.
5.  **Be Specific and Actionable:** The objective should be clear, concise, and indicate a concrete action.



[CODE METRICS AND ANALYSIS]
Large Files (potential candidates for modularization):
  - main.py (LOC: 466)
  - agent/deep_validator.py (LOC: 363)
  - agent/brain.py (LOC: 395)
  - agent/agents.py (LOC: 367)
  - agent/patch_applicator.py (LOC: 697)
  - agent/cycle_runner.py (LOC: 500)
  - agent/project_scanner.py (LOC: 462)

Large Functions (potential candidates for refactoring/splitting):
  - agent/deep_validator.py -> analyze_complexity() (LOC: 84)
  - agent/deep_validator.py -> calculate_quality_score() (LOC: 89)
  - agent/deep_validator.py -> detect_code_duplication() (LOC: 126)
  - agent/brain.py -> generate_next_objective() (LOC: 187)
  - agent/brain.py -> generate_capacitation_objective() (LOC: 66)
  - agent/brain.py -> generate_commit_message() (LOC: 102)
  - agent/git_utils.py -> initialize_git_repository() (LOC: 208)
  - agent/agents.py -> parse_json_response() (LOC: 72)
  - agent/patch_applicator.py -> _handle_replace() (LOC: 71)
  - agent/patch_applicator.py -> _handle_delete_block() (LOC: 78)
  - agent/patch_applicator.py -> apply_patches() (LOC: 285)
  - agent/cycle_runner.py -> run_cycles() (LOC: 474)
  - agent/project_scanner.py -> update_project_manifest() (LOC: 188)
  - agent/project_scanner.py -> analyze_code_metrics() (LOC: 208)
  - agent/utils/llm_client.py -> call_llm_api() (LOC: 112)

Complex Functions (high CC, potential candidates for refactoring/simplification):
  - agent/deep_validator.py -> analyze_complexity() (CC: 15)
  - agent/deep_validator.py -> calculate_quality_score() (CC: 23)
  - agent/deep_validator.py -> detect_code_duplication() (CC: 20)
  - agent/brain.py -> generate_next_objective() (CC: 32)
  - agent/brain.py -> generate_capacitation_objective() (CC: 11)
  - agent/brain.py -> generate_commit_message() (CC: 15)
  - agent/git_utils.py -> initialize_git_repository() (CC: 14)
  - agent/agents.py -> parse_json_response() (CC: 26)
  - agent/patch_applicator.py -> _handle_replace() (CC: 15)
  - agent/patch_applicator.py -> _handle_delete_block() (CC: 21)
  - agent/patch_applicator.py -> apply_patches() (CC: 65)
  - agent/cycle_runner.py -> run_cycles() (CC: 85)
  - agent/project_scanner.py -> update_project_manifest() (CC: 45)
  - agent/project_scanner.py -> analyze_code_metrics() (CC: 47)
  - agent/utils/llm_client.py -> call_llm_api() (CC: 29)

Modules without Corresponding Test Files (consider creating tests):
  - main.py
  - agent/deep_validator.py
  - agent/brain.py
  - agent/git_utils.py
  - agent/code_validator.py
  - agent/error_correction.py
  - agent/agents.py
  - agent/patch_applicator.py
  - agent/cycle_runner.py
  - agent/memory.py
  - agent/tool_executor.py
  - agent/project_scanner.py
  - agent/state.py
  - agent/error_analyzer.py
  - agent/validation_steps/pytest_validator.py
  - agent/validation_steps/self_improvement_validator.py
  - agent/validation_steps/__init__.py
  - agent/validation_steps/base.py
  - agent/validation_steps/patch_applicator.py
  - agent/validation_steps/syntax_validator.py
  - agent/validation_steps/pytest_new_file_validator.py
  - agent/utils/llm_client.py

[CURRENT PROJECT MANIFEST (if existing)]
N/A (Manifesto non-existent or empty)

[Examples of Smart and Self-Aware Objectives]
*   **Metrics-Based Refactoring:**
    *   "Refactor the module `agent/brain.py` (LOC: 350) which is extensive, considering splitting responsibilities into smaller modules (e.g., `agent/prompt_builder.py` or `agent/analysis_processor.py`)."
    *   "The function `generate_next_objective` in `agent/brain.py` (LOC: 85, CC: 12) is long and complex. Propose a plan to refactor it into smaller, more focused functions."
    *   "Analyze the most complex functions (CC > 10) listed in the metrics and select one for refactoring."
*   **Test Creation (Generate New Test Files):**
    *   "The module `agent/project_scanner.py` is missing a test file. Create a new test file `tests/agent/test_project_scanner.py` with basic unit tests for the `analyze_code_metrics` function."
    *   "Module `agent/memory.py` lacks tests. Generate `tests/agent/test_memory.py` and include placeholder tests for its public functions."
    *   "Create unit tests for the module `agent/tool_executor.py` in a new file `tests/agent/test_tool_executor.py`, focusing on the `web_search` function."
    *   "The function `call_llm_api` in `agent/utils/llm_client.py` is critical. Ensure robust unit tests exist for it in `tests/agent/utils/test_llm_client.py`, covering success and failure cases. If the test file doesn't exist, create it."
*   **Strategic Documentation Improvement:**
    *   "The manifest (`AGENTS.md`) does not describe the new metrics analysis functionality in `project_scanner.py`. Update it."
    *   "Improve docstrings for public functions in the `agent/memory.py` module to detail parameters and expected behavior."
*   **Development of New Capabilities (Agents/Tools):**
    *   "Create a new agent (e.g., `CodeQualityAgent` in `agent/agents.py`) dedicated to continuously monitoring code quality metrics and reporting regressions."
    *   "Develop a new tool in `agent/tool_executor.py` to automatically validate the syntax of JSON files before processing."
    *   "Propose a system for Hephaestus to evaluate the performance of its own operations and identify bottlenecks."
*   **Generic Objectives (when metrics/manifest are insufficient):**
    *   "Analyze the `agent/state.py` module to identify potential improvements in clarity or efficiency."
    *   "Review recent logs for frequent errors and propose an objective to fix them."

[Your Task]
Based on ALL the information provided (metrics, manifest, history), generate ONLY a single text string containing the NEXT STRATEGIC OBJECTIVE. The objective should be the most impactful and logical for the project's evolution at this moment.
Be concise, but specific enough to be actionable.

