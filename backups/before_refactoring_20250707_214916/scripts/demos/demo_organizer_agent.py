#!/usr/bin/env python3
"""
Demonstra√ß√£o do OrganizerAgent - Agente Organizador do Projeto Hephaestus

Este script demonstra as capacidades do OrganizerAgent para:
- Analisar a estrutura atual do projeto
- Gerar planos de reorganiza√ß√£o inteligentes
- Executar reorganiza√ß√µes de forma segura
- Gerar relat√≥rios detalhados

Uso:
    python demo_organizer_agent.py
"""

import asyncio
import json
import logging
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, Any

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent))

from agent.hephaestus_agent import HephaestusAgent
from agent.config_loader import load_config

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class OrganizerAgentDemo:
    """Demonstra√ß√£o do OrganizerAgent"""
    
    def __init__(self):
        self.config = load_config()
        self.hephaestus_agent = None
        
    async def setup(self):
        """Configura o agente para demonstra√ß√£o"""
        logger.info("üöÄ Configurando OrganizerAgent para demonstra√ß√£o...")
        
        # Criar inst√¢ncia do HephaestusAgent
        self.hephaestus_agent = HephaestusAgent(
            logger_instance=logger,
            config=self.config,
            continuous_mode=False
        )
        
        logger.info("‚úÖ OrganizerAgent configurado com sucesso!")
    
    async def demo_analyze_structure(self):
        """Demonstra an√°lise da estrutura atual"""
        logger.info("\n" + "="*60)
        logger.info("üîç DEMONSTRA√á√ÉO: An√°lise da Estrutura Atual")
        logger.info("="*60)
        
        try:
            result = await self.hephaestus_agent.analyze_project_structure()
            
            if result["success"]:
                analysis = result["analysis"]
                
                # Estat√≠sticas principais
                stats = analysis["statistics"]
                logger.info(f"üìä ESTAT√çSTICAS GERAIS:")
                logger.info(f"   ‚Ä¢ Total de arquivos: {stats['total_files']}")
                logger.info(f"   ‚Ä¢ Total de linhas: {stats['total_lines']:,}")
                logger.info(f"   ‚Ä¢ Tamanho total: {stats['total_size_mb']:.2f} MB")
                logger.info(f"   ‚Ä¢ Diret√≥rios: {stats['directories_count']}")
                logger.info(f"   ‚Ä¢ Problemas identificados: {stats['problems_count']}")
                
                # Distribui√ß√£o por tipo
                logger.info(f"\nüìÅ DISTRIBUI√á√ÉO POR TIPO:")
                for file_type, count in stats["file_types"].items():
                    percentage = (count / stats["total_files"]) * 100
                    logger.info(f"   ‚Ä¢ {file_type}: {count} arquivos ({percentage:.1f}%)")
                
                # Problemas identificados
                if analysis["problems"]:
                    logger.info(f"\n‚ö†Ô∏è PROBLEMAS IDENTIFICADOS:")
                    for i, problem in enumerate(analysis["problems"], 1):
                        logger.info(f"   {i}. {problem}")
                else:
                    logger.info(f"\n‚úÖ Nenhum problema estrutural identificado!")
                
                # An√°lise de complexidade
                complexity = analysis["complexity_analysis"]
                logger.info(f"\nüß† AN√ÅLISE DE COMPLEXIDADE:")
                logger.info(f"   ‚Ä¢ Score m√©dio de complexidade: {stats['avg_complexity']:.2f}")
                logger.info(f"   ‚Ä¢ Score m√©dio de import√¢ncia: {stats['avg_importance']:.2f}")
                
                if complexity["most_complex_files"]:
                    logger.info(f"   ‚Ä¢ Arquivos mais complexos:")
                    for file_info in complexity["most_complex_files"][:3]:
                        logger.info(f"     - {file_info['path']} (score: {file_info['score']:.2f})")
                
            else:
                logger.error(f"‚ùå Erro na an√°lise: {result.get('error', 'Erro desconhecido')}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro durante demonstra√ß√£o: {e}")
    
    async def demo_generate_plan(self):
        """Demonstra gera√ß√£o de plano de reorganiza√ß√£o"""
        logger.info("\n" + "="*60)
        logger.info("üìã DEMONSTRA√á√ÉO: Gera√ß√£o de Plano de Reorganiza√ß√£o")
        logger.info("="*60)
        
        try:
            result = await self.hephaestus_agent.generate_organization_plan()
            
            if result["success"]:
                plan = result["plan"]
                
                logger.info(f"üìã PLANO DE REORGANIZA√á√ÉO GERADO:")
                logger.info(f"   ‚Ä¢ Arquivos a mover: {len(plan['file_movements'])}")
                logger.info(f"   ‚Ä¢ Novos diret√≥rios: {len(plan['new_directories'])}")
                logger.info(f"   ‚Ä¢ A√ß√µes de limpeza: {len(plan['cleanup_actions'])}")
                
                # Passos de execu√ß√£o
                logger.info(f"\nüîÑ PASSOS DE EXECU√á√ÉO:")
                for i, step in enumerate(plan["execution_steps"], 1):
                    logger.info(f"   {i}. {step}")
                
                # Impacto estimado
                impact = plan["estimated_impact"]
                logger.info(f"\nüìà IMPACTO ESTIMADO:")
                logger.info(f"   ‚Ä¢ Arquivos afetados: {impact['files_affected_percentage']:.1f}%")
                logger.info(f"   ‚Ä¢ Redu√ß√£o de complexidade: {impact['complexity_reduction']:.1%}")
                logger.info(f"   ‚Ä¢ Melhoria de manutenibilidade: {impact['maintainability_improvement']:.1%}")
                logger.info(f"   ‚Ä¢ Melhoria da experi√™ncia do desenvolvedor: {impact['developer_experience_improvement']:.1%}")
                logger.info(f"   ‚Ä¢ N√≠vel de risco: {impact['risk_level']:.1%}")
                
                # Exemplos de movimentos
                if plan["file_movements"]:
                    logger.info(f"\nüì¶ EXEMPLOS DE MOVIMENTOS:")
                    for movement in plan["file_movements"][:5]:  # Primeiros 5
                        logger.info(f"   ‚Ä¢ {movement['source']} ‚Üí {movement['target']}")
                        logger.info(f"     Raz√£o: {movement['reason']}")
                    
                    if len(plan["file_movements"]) > 5:
                        logger.info(f"   ... e mais {len(plan['file_movements']) - 5} movimentos")
                
                # Novos diret√≥rios
                if plan["new_directories"]:
                    logger.info(f"\nüìÅ NOVOS DIRET√ìRIOS PROPOSTOS:")
                    for dir_path in plan["new_directories"][:10]:  # Primeiros 10
                        logger.info(f"   ‚Ä¢ {dir_path}")
                    
                    if len(plan["new_directories"]) > 10:
                        logger.info(f"   ... e mais {len(plan['new_directories']) - 10} diret√≥rios")
                
            else:
                logger.error(f"‚ùå Erro na gera√ß√£o do plano: {result.get('error', 'Erro desconhecido')}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro durante demonstra√ß√£o: {e}")
    
    async def demo_execute_plan_dry_run(self):
        """Demonstra execu√ß√£o do plano em modo dry run"""
        logger.info("\n" + "="*60)
        logger.info("üß™ DEMONSTRA√á√ÉO: Execu√ß√£o do Plano (Dry Run)")
        logger.info("="*60)
        
        try:
            result = await self.hephaestus_agent.execute_organization_plan(dry_run=True)
            
            if result["success"]:
                execution_result = result["result"]
                
                logger.info(f"‚úÖ DRY RUN CONCLU√çDO COM SUCESSO!")
                logger.info(f"   ‚Ä¢ Tempo de execu√ß√£o: {execution_result['execution_time']:.2f}s")
                logger.info(f"   ‚Ä¢ Arquivos movidos: {len(execution_result['moved_files'])}")
                logger.info(f"   ‚Ä¢ Diret√≥rios criados: {len(execution_result['created_directories'])}")
                logger.info(f"   ‚Ä¢ Erros: {len(execution_result['errors'])}")
                logger.info(f"   ‚Ä¢ Avisos: {len(execution_result['warnings'])}")
                
                # Mostrar alguns avisos (simula√ß√µes)
                if execution_result["warnings"]:
                    logger.info(f"\n‚ö†Ô∏è AVISOS DO DRY RUN:")
                    for warning in execution_result["warnings"][:5]:
                        logger.info(f"   ‚Ä¢ {warning}")
                
                # Mostrar erros se houver
                if execution_result["errors"]:
                    logger.info(f"\n‚ùå ERROS IDENTIFICADOS:")
                    for error in execution_result["errors"]:
                        logger.info(f"   ‚Ä¢ {error}")
                
                logger.info(f"\nüí° O dry run simula todas as opera√ß√µes sem fazer mudan√ßas reais.")
                logger.info(f"   Para executar a reorganiza√ß√£o real, use dry_run=False")
                
            else:
                logger.error(f"‚ùå Erro na execu√ß√£o do dry run: {result.get('error', 'Erro desconhecido')}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro durante demonstra√ß√£o: {e}")
    
    async def demo_generate_report(self):
        """Demonstra gera√ß√£o de relat√≥rio completo"""
        logger.info("\n" + "="*60)
        logger.info("üìä DEMONSTRA√á√ÉO: Relat√≥rio Completo de Organiza√ß√£o")
        logger.info("="*60)
        
        try:
            result = await self.hephaestus_agent.get_organization_report()
            
            if result["success"]:
                report = result["report"]
                
                # Estado atual
                current = report["current_state"]
                logger.info(f"üìä ESTADO ATUAL:")
                logger.info(f"   ‚Ä¢ Total de arquivos: {current['total_files']}")
                logger.info(f"   ‚Ä¢ Total de linhas: {current['total_lines']:,}")
                logger.info(f"   ‚Ä¢ Score de complexidade: {current['complexity_score']:.2f}")
                logger.info(f"   ‚Ä¢ Problemas identificados: {len(current['problems'])}")
                
                # Mudan√ßas propostas
                changes = report["proposed_changes"]
                logger.info(f"\nüîÑ MUDAN√áAS PROPOSTAS:")
                logger.info(f"   ‚Ä¢ Arquivos a mover: {changes['files_to_move']}")
                logger.info(f"   ‚Ä¢ Novos diret√≥rios: {changes['new_directories']}")
                logger.info(f"   ‚Ä¢ A√ß√µes de limpeza: {changes['cleanup_actions']}")
                
                # Benef√≠cios
                benefits = report["benefits"]
                logger.info(f"\n‚úÖ BENEF√çCIOS ESPERADOS:")
                for benefit, description in benefits.items():
                    logger.info(f"   ‚Ä¢ {benefit.replace('_', ' ').title()}: {description}")
                
                # Riscos
                risks = report["risks"]
                logger.info(f"\n‚ö†Ô∏è RISCOS IDENTIFICADOS:")
                for risk, description in risks.items():
                    logger.info(f"   ‚Ä¢ {risk.replace('_', ' ').title()}: {description}")
                
                # Recomenda√ß√µes
                recommendations = report["recommendations"]
                logger.info(f"\nüí° RECOMENDA√á√ïES:")
                for i, recommendation in enumerate(recommendations, 1):
                    logger.info(f"   {i}. {recommendation}")
                
            else:
                logger.error(f"‚ùå Erro na gera√ß√£o do relat√≥rio: {result.get('error', 'Erro desconhecido')}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro durante demonstra√ß√£o: {e}")
    
    async def demo_show_ideal_structure(self):
        """Demonstra a estrutura ideal proposta"""
        logger.info("\n" + "="*60)
        logger.info("üèóÔ∏è DEMONSTRA√á√ÉO: Estrutura Ideal Proposta")
        logger.info("="*60)
        
        try:
            # Acessar diretamente o organizer para mostrar a estrutura ideal
            organizer = self.hephaestus_agent.organizer
            
            logger.info("üìÅ ESTRUTURA IDEAL DO PROJETO:")
            logger.info("")
            
            for dir_name, dir_structure in organizer.ideal_structure.items():
                logger.info(f"üìÇ {dir_name}/")
                logger.info(f"   Prop√≥sito: {dir_structure.purpose}")
                
                if dir_structure.rules:
                    logger.info(f"   Regras:")
                    for rule in dir_structure.rules:
                        logger.info(f"     ‚Ä¢ {rule}")
                
                logger.info("")
            
            logger.info("üí° Esta estrutura segue as melhores pr√°ticas de organiza√ß√£o de projetos Python")
            logger.info("   e facilita a manuten√ß√£o, navega√ß√£o e colabora√ß√£o entre desenvolvedores.")
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante demonstra√ß√£o: {e}")
    
    async def run_full_demo(self):
        """Executa a demonstra√ß√£o completa"""
        logger.info("üéØ INICIANDO DEMONSTRA√á√ÉO COMPLETA DO ORGANIZER AGENT")
        logger.info("="*80)
        
        # Setup
        await self.setup()
        
        # Demonstra√ß√µes
        await self.demo_analyze_structure()
        await self.demo_generate_plan()
        await self.demo_execute_plan_dry_run()
        await self.demo_generate_report()
        await self.demo_show_ideal_structure()
        
        logger.info("\n" + "="*80)
        logger.info("üéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
        logger.info("="*80)
        logger.info("")
        logger.info("üìö PR√ìXIMOS PASSOS:")
        logger.info("   1. Acesse a API em http://localhost:8000/docs")
        logger.info("   2. Teste os endpoints do OrganizerAgent:")
        logger.info("      ‚Ä¢ GET /api/organizer/analyze-structure")
        logger.info("      ‚Ä¢ GET /api/organizer/generate-plan")
        logger.info("      ‚Ä¢ POST /api/organizer/execute-plan")
        logger.info("      ‚Ä¢ GET /api/organizer/report")
        logger.info("")
        logger.info("   3. Para executar uma reorganiza√ß√£o real:")
        logger.info("      ‚Ä¢ Fa√ßa backup do projeto")
        logger.info("      ‚Ä¢ Use dry_run=False no endpoint execute-plan")
        logger.info("      ‚Ä¢ Monitore os logs para acompanhar o progresso")
        logger.info("")
        logger.info("üîß O OrganizerAgent est√° pronto para reorganizar seu projeto!")
        logger.info("   Ele analisa, planeja e executa reorganiza√ß√µes de forma inteligente e segura.")

async def main():
    """Fun√ß√£o principal"""
    demo = OrganizerAgentDemo()
    await demo.run_full_demo()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è Demonstra√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal na demonstra√ß√£o: {e}")
        sys.exit(1) 