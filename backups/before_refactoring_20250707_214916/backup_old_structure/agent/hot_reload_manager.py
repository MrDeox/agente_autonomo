"""
üîÑ Hot Reload Manager - Sistema de Auto-Atualiza√ß√£o em Tempo Real
Permite que o Hephaestus evolua e se atualize automaticamente sem reiniciar
"""

import os
import sys
import importlib
import threading
import time
import logging
from typing import Dict, Set, Callable, Any, Optional
from pathlib import Path
import inspect
import ast
import types

from agent.state import AgentState

try:
    from watchdog.observers import Observer
    from watchdog.events import FileSystemEventHandler
    WATCHDOG_AVAILABLE = True
except ImportError:
    WATCHDOG_AVAILABLE = False
    print("‚ö†Ô∏è watchdog not installed. Run: pip install watchdog")

class HotReloadManager:
    """Sistema de hot reload para evolu√ß√£o em tempo real"""
    
    def __init__(self, agent_state: AgentState, logger: logging.Logger, base_path: str = None):
        self.agent_state = agent_state
        self.logger = logger
        self.base_path = base_path or os.path.dirname(os.path.abspath(__file__))
        self.observers = []
        self.module_cache = {}
        self.reload_callbacks = {}
        self.auto_evolution_enabled = True
        self.evolution_history = []
        self.active_modules = set()
        self.reload_lock = threading.Lock()
        
    def start_hot_reload(self):
        """Iniciar monitoramento de arquivos para hot reload"""
        self.logger.info("üîÑ Starting Hot Reload Manager...")
        
        if not WATCHDOG_AVAILABLE:
            self.logger.warning("‚ùå Watchdog not available. Install with: pip install watchdog")
            return False
        
        # Monitorar diret√≥rio agent
        agent_handler = AgentFileHandler(self)
        agent_observer = Observer()
        agent_observer.schedule(agent_handler, self.base_path, recursive=True)
        agent_observer.start()
        self.observers.append(agent_observer)
        
        # Monitorar diret√≥rio tools
        tools_path = os.path.join(os.path.dirname(self.base_path), "tools")
        if os.path.exists(tools_path):
            tools_handler = ToolsFileHandler(self)
            tools_observer = Observer()
            tools_observer.schedule(tools_handler, tools_path, recursive=True)
            tools_observer.start()
            self.observers.append(tools_observer)
        
        # Monitorar config
        config_path = os.path.join(os.path.dirname(self.base_path), "config")
        if os.path.exists(config_path):
            config_handler = ConfigFileHandler(self)
            config_observer = Observer()
            config_observer.schedule(config_handler, config_path, recursive=True)
            config_observer.start()
            self.observers.append(config_observer)
        
        self.logger.info("‚úÖ Hot Reload Manager active - Real-time evolution enabled!")
        return True
        
    def stop_hot_reload(self):
        """Parar monitoramento de hot reload"""
        self.logger.info("üõë Stopping Hot Reload Manager...")
        for observer in self.observers:
            observer.stop()
            observer.join()
        self.observers.clear()
        
    def reload_module(self, module_path: str, force: bool = False):
        """Recarregar m√≥dulo espec√≠fico"""
        with self.reload_lock:
            try:
                # Converter path para module name
                module_name = self._path_to_module_name(module_path)
                
                if not module_name:
                    return False
                
                self.logger.info(f"üîÑ Reloading module: {module_name}")
                
                # Backup do m√≥dulo atual
                old_module = sys.modules.get(module_name)
                
                # Recarregar m√≥dulo
                if module_name in sys.modules:
                    importlib.reload(sys.modules[module_name])
                else:
                    importlib.import_module(module_name)
                
                # Executar callbacks de reload
                if module_name in self.reload_callbacks:
                    for callback in self.reload_callbacks[module_name]:
                        try:
                            callback(sys.modules[module_name], old_module)
                        except Exception as e:
                            self.logger.error(f"‚ùå Error in reload callback: {e}")
                
                # Registrar evolu√ß√£o
                self.evolution_history.append({
                    "timestamp": time.time(),
                    "module": module_name,
                    "type": "hot_reload",
                    "success": True
                })
                
                self.logger.info(f"‚úÖ Module {module_name} reloaded successfully")
                return True
                
            except Exception as e:
                self.logger.error(f"‚ùå Failed to reload module {module_path}: {e}")
                
                # Registrar falha
                self.evolution_history.append({
                    "timestamp": time.time(),
                    "module": module_path,
                    "type": "hot_reload",
                    "success": False,
                    "error": str(e)
                })
                return False
    
    def register_reload_callback(self, module_name: str, callback: Callable):
        """Registrar callback para quando m√≥dulo for recarregado"""
        if module_name not in self.reload_callbacks:
            self.reload_callbacks[module_name] = []
        self.reload_callbacks[module_name].append(callback)
        
    def self_modify_code(self, module_name: str, new_code: str):
        """Permitir que o sistema modifique seu pr√≥prio c√≥digo"""
        try:
            # Encontrar arquivo do m√≥dulo
            module_file = self._find_module_file(module_name)
            if not module_file:
                self.logger.error(f"‚ùå Module file not found: {module_name}")
                return False
            
            # Validar sintaxe do novo c√≥digo
            try:
                ast.parse(new_code)
            except SyntaxError as e:
                self.logger.error(f"‚ùå Syntax error in new code: {e}")
                return False
            
            # Backup do c√≥digo atual
            backup_path = f"{module_file}.backup.{int(time.time())}"
            with open(module_file, 'r') as f:
                old_code = f.read()
            
            with open(backup_path, 'w') as f:
                f.write(old_code)
            
            # Escrever novo c√≥digo
            with open(module_file, 'w') as f:
                f.write(new_code)
            
            self.logger.info(f"üîÑ Self-modified code for module: {module_name}")
            self.logger.info(f"üìÅ Backup saved to: {backup_path}")
            
            # Recarregar m√≥dulo automaticamente
            time.sleep(0.1)  # Dar tempo para o file watcher detectar
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to self-modify code: {e}")
            return False
    
    def dynamic_import(self, code: str, module_name: str = None):
        """Importar c√≥digo dinamicamente em tempo de execu√ß√£o"""
        try:
            # Criar m√≥dulo tempor√°rio
            temp_module_name = module_name or f"dynamic_module_{int(time.time())}"
            
            # Compilar c√≥digo
            compiled_code = compile(code, f"<{temp_module_name}>", "exec")
            
            # Criar m√≥dulo
            module = types.ModuleType(temp_module_name)
            module.__file__ = f"<dynamic:{temp_module_name}>"
            
            # Executar c√≥digo no m√≥dulo
            exec(compiled_code, module.__dict__)
            
            # Adicionar ao sys.modules
            sys.modules[temp_module_name] = module
            
            self.logger.info(f"‚úÖ Dynamic module imported: {temp_module_name}")
            
            return module
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to import dynamic code: {e}")
            return None
    
    def get_evolution_status(self):
        """Obter status da evolu√ß√£o em tempo real"""
        return {
            "hot_reload_active": len(self.observers) > 0,
            "monitored_paths": len(self.observers),
            "evolution_history": self.evolution_history[-10:],  # √öltimas 10 evolu√ß√µes
            "active_modules": len(self.active_modules),
            "reload_callbacks": len(self.reload_callbacks),
            "auto_evolution_enabled": self.auto_evolution_enabled,
            "watchdog_available": WATCHDOG_AVAILABLE
        }
    
    def enable_auto_evolution(self):
        """Habilitar evolu√ß√£o autom√°tica"""
        self.auto_evolution_enabled = True
        self.logger.info("üß¨ Auto-evolution enabled!")
    
    def disable_auto_evolution(self):
        """Desabilitar evolu√ß√£o autom√°tica"""
        self.auto_evolution_enabled = False
        self.logger.info("‚è∏Ô∏è Auto-evolution disabled!")
    
    def _path_to_module_name(self, file_path: str) -> Optional[str]:
        """Converter path do arquivo para nome do m√≥dulo"""
        try:
            # Normalizar path
            file_path = os.path.abspath(file_path)
            
            # Encontrar root do projeto
            project_root = os.path.dirname(self.base_path)
            
            # Calcular path relativo
            rel_path = os.path.relpath(file_path, project_root)
            
            # Converter para module name
            if rel_path.endswith('.py'):
                rel_path = rel_path[:-3]  # Remove .py
            
            module_name = rel_path.replace(os.sep, '.')
            
            return module_name if module_name != '__init__' else None
            
        except Exception as e:
            self.logger.error(f"‚ùå Error converting path to module name: {e}")
            return None
    
    def _find_module_file(self, module_name: str) -> Optional[str]:
        """Encontrar arquivo do m√≥dulo"""
        try:
            # Converter module name para path
            module_path = module_name.replace('.', os.sep) + '.py'
            project_root = os.path.dirname(self.base_path)
            full_path = os.path.join(project_root, module_path)
            
            if os.path.exists(full_path):
                return full_path
            
            # Tentar __init__.py
            init_path = os.path.join(project_root, module_name.replace('.', os.sep), '__init__.py')
            if os.path.exists(init_path):
                return init_path
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå Error finding module file: {e}")
            return None


if WATCHDOG_AVAILABLE:
    class BaseFileChangeHandler(FileSystemEventHandler):
        def __init__(self, hot_reload_manager: HotReloadManager):
            self.hot_reload_manager = hot_reload_manager
            self.logger = hot_reload_manager.logger
            self.agent_state = hot_reload_manager.agent_state

        def on_modified(self, event):
            if event.is_directory or not event.src_path.endswith('.py'):
                return
            
            # The core logic: check if the agent is modifying itself.
            if self.agent_state.is_self_modifying:
                self.logger.info(f"üß¨ Agent self-modification detected for {event.src_path}. Triggering dynamic reload.")
                time.sleep(0.5) # Give file time to be fully written
                self.hot_reload_manager.reload_module(event.src_path)
            else:
                self.logger.info(f"üîß Manual file change detected for {event.src_path}. Allowing uvicorn to handle reload.")
                # By doing nothing, we let the default uvicorn reloader take over.
                pass

    class AgentFileHandler(BaseFileChangeHandler):
        """Handler for files in the agent directory."""
        pass # Logic is handled by the base class

    class ToolsFileHandler(BaseFileChangeHandler):
        """Handler for files in the tools directory."""
        pass # Logic is handled by the base class

    class ConfigFileHandler(FileSystemEventHandler):
        """Handler para arquivos de configura√ß√£o (n√£o aciona reload de c√≥digo)."""
        
        def __init__(self, hot_reload_manager: HotReloadManager):
            self.hot_reload_manager = hot_reload_manager
            self.logger = hot_reload_manager.logger
        
        def on_modified(self, event):
            if event.is_directory:
                return
            
            if event.src_path.endswith(('.yaml', '.yml', '.json')):
                self.logger.info(f"‚öôÔ∏è Config file modified: {event.src_path}")
                self.logger.info("üìÑ Configuration change detected. Manual restart may be needed to apply some changes.")
                # For now, just logs. A more advanced version could trigger specific config reload callbacks.


class SelfEvolutionEngine:
    """Engine para auto-evolu√ß√£o do sistema"""
    
    def __init__(self, hot_reload_manager: HotReloadManager):
        self.hot_reload_manager = hot_reload_manager
        self.logger = hot_reload_manager.logger
        self.evolution_patterns = []
        self.learning_database = {}
        
    def analyze_performance_and_evolve(self):
        """Analisar performance e evoluir automaticamente"""
        try:
            self.logger.info("üß¨ Analyzing system performance for auto-evolution...")
            
            # Coletar m√©tricas
            metrics = self._collect_performance_metrics()
            
            # Identificar gargalos
            bottlenecks = self._identify_bottlenecks(metrics)
            
            # Gerar otimiza√ß√µes
            optimizations = self._generate_optimizations(bottlenecks)
            
            # Aplicar otimiza√ß√µes
            for optimization in optimizations:
                self._apply_optimization(optimization)
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error in auto-evolution: {e}")
            return False
    
    def _collect_performance_metrics(self):
        """Coletar m√©tricas de performance"""
        # Implementar coleta de m√©tricas
        return {
            "cpu_usage": 0.1,
            "memory_usage": 0.2,
            "response_time": 0.001,
            "error_rate": 0.0
        }
    
    def _identify_bottlenecks(self, metrics):
        """Identificar gargalos de performance"""
        bottlenecks = []
        
        if metrics["cpu_usage"] > 0.8:
            bottlenecks.append("high_cpu")
        
        if metrics["memory_usage"] > 0.9:
            bottlenecks.append("high_memory")
        
        if metrics["response_time"] > 1.0:
            bottlenecks.append("slow_response")
        
        return bottlenecks
    
    def _generate_optimizations(self, bottlenecks):
        """Gerar otimiza√ß√µes baseadas nos gargalos"""
        optimizations = []
        
        for bottleneck in bottlenecks:
            if bottleneck == "high_cpu":
                optimizations.append({
                    "type": "cpu_optimization",
                    "action": "add_caching",
                    "target": "agent.llm_client"
                })
            elif bottleneck == "high_memory":
                optimizations.append({
                    "type": "memory_optimization",
                    "action": "optimize_storage",
                    "target": "agent.memory"
                })
        
        return optimizations
    
    def _apply_optimization(self, optimization):
        """Aplicar otimiza√ß√£o espec√≠fica"""
        try:
            self.logger.info(f"üîß Applying optimization: {optimization['type']}")
            
            # Aqui seria implementada a l√≥gica espec√≠fica de cada otimiza√ß√£o
            # Por exemplo, modificar c√≥digo para adicionar cache
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error applying optimization: {e}")
            return False 