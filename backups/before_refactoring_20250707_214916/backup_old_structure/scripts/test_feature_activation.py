#!/usr/bin/env python3
"""
Script para testar a ativa√ß√£o de funcionalidades n√£o utilizadas
"""

import sys
import os
import logging
import time
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from agent.config_loader import load_config
from agent.system_activator import get_system_activator

def setup_logging():
    """Configura logging para o teste"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('logs/feature_activation_test.log')
        ]
    )
    return logging.getLogger("feature_activation_test")

def test_feature_activation():
    """Testa a ativa√ß√£o de funcionalidades"""
    logger = setup_logging()
    logger.info("üß™ Iniciando teste de ativa√ß√£o de funcionalidades")
    
    try:
        # Carregar configura√ß√£o
        config = load_config()
        logger.info("‚úÖ Configura√ß√£o carregada")
        
        # Criar ativador do sistema
        activator = get_system_activator(logger, config)
        logger.info("‚úÖ SystemActivator criado")
        
        # Ativar todas as funcionalidades
        logger.info("üöÄ Iniciando ativa√ß√£o de funcionalidades...")
        start_time = time.time()
        
        results = activator.activate_all_features()
        
        end_time = time.time()
        activation_time = end_time - start_time
        
        # Gerar relat√≥rio
        report = activator.get_activation_report()
        active_features = activator.get_active_features()
        
        # Mostrar resultados
        logger.info("=" * 60)
        logger.info("üìä RESULTADOS DO TESTE DE ATIVA√á√ÉO")
        logger.info("=" * 60)
        logger.info(f"‚è±Ô∏è  Tempo total: {activation_time:.2f} segundos")
        logger.info(f"‚úÖ Funcionalidades ativadas: {len(active_features)}")
        logger.info(f"üìà Taxa de sucesso: {(len(active_features)/len(activator.features_to_activate)*100):.1f}%")
        
        logger.info("\nüéØ FUNCIONALIDADES ATIVAS:")
        for feature in active_features:
            logger.info(f"   ‚Ä¢ {feature}")
        
        logger.info("\nüìã RELAT√ìRIO DETALHADO:")
        logger.info(report)
        
        # Verificar funcionalidades espec√≠ficas
        logger.info("\nüîç VERIFICA√á√ÉO DE FUNCIONALIDADES ESPEC√çFICAS:")
        
        # Testar cache inteligente
        try:
            from agent.utils.intelligent_cache import IntelligentCache
            cache = IntelligentCache()
            cache.set("test_key", "test_value", ttl=60)
            result = cache.get("test_key")
            if result == "test_value":
                logger.info("   ‚úÖ Cache inteligente funcionando")
            else:
                logger.warning("   ‚ö†Ô∏è Cache inteligente com problema")
        except Exception as e:
            logger.error(f"   ‚ùå Erro no cache inteligente: {e}")
        
        # Testar UX enhancer
        try:
            from agent.utils.ux_enhancer import UXEnhancer
            ux = UXEnhancer()
            welcome_msg = ux.format_welcome_message("Test User")
            logger.info(f"   ‚úÖ UX enhancer funcionando: {welcome_msg}")
        except Exception as e:
            logger.error(f"   ‚ùå Erro no UX enhancer: {e}")
        
        # Testar monitor cont√≠nuo
        try:
            from agent.utils.continuous_monitor import get_continuous_monitor
            monitor = get_continuous_monitor(logger)
            if monitor:
                logger.info("   ‚úÖ Monitor cont√≠nuo funcionando")
            else:
                logger.warning("   ‚ö†Ô∏è Monitor cont√≠nuo com problema")
        except Exception as e:
            logger.error(f"   ‚ùå Erro no monitor cont√≠nuo: {e}")
        
        # Testar validador inteligente
        try:
            from agent.utils.smart_validator import SmartValidator
            validator = SmartValidator()
            if validator:
                logger.info("   ‚úÖ Validador inteligente funcionando")
            else:
                logger.warning("   ‚ö†Ô∏è Validador inteligente com problema")
        except Exception as e:
            logger.error(f"   ‚ùå Erro no validador inteligente: {e}")
        
        logger.info("\nüéâ Teste de ativa√ß√£o conclu√≠do com sucesso!")
        
        return {
            "success": True,
            "activated_features": active_features,
            "total_activated": len(active_features),
            "activation_time": activation_time,
            "report": report
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste de ativa√ß√£o: {e}")
        return {
            "success": False,
            "error": str(e)
        }

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Teste de Ativa√ß√£o de Funcionalidades do Hephaestus")
    print("=" * 60)
    
    # Criar diret√≥rio de logs se n√£o existir
    Path("logs").mkdir(exist_ok=True)
    
    # Executar teste
    result = test_feature_activation()
    
    if result["success"]:
        print(f"\n‚úÖ Teste conclu√≠do com sucesso!")
        print(f"üìä Funcionalidades ativadas: {result['total_activated']}")
        print(f"‚è±Ô∏è  Tempo de ativa√ß√£o: {result['activation_time']:.2f}s")
    else:
        print(f"\n‚ùå Teste falhou: {result['error']}")
        sys.exit(1)

if __name__ == "__main__":
    main() 